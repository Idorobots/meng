# ###############################################################################
#+TITLE: Projekt języka programowania \\ wspierającego przetwarzanie rozproszone \\ na platformach heterogenicznych.
#+AUTHOR: Kajetan Rzepecki
#+DATE: \today
#+LANGUAGE: pl
#+LATEX_HEADER: \institute[AGH-UST]{Wydział EAIiIB\\ Katedra Informatyki Stosowanej}
#
#+startup: beamer
#+LATEX_CLASS: beamer

#+OPTIONS: toc:nil
#
#+LATEX_HEADER: \usepackage[polish]{babel}
#+LATEX_HEADER: \usepackage{ifthen}
#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \usepackage{minted}
#
#+LATEX_HEADER: \usetheme{AGH}
#+LATEX_HEADER: \setbeamertemplate{itemize item}{$\maltese$}
# ###################

# Helpers & Stuff
#+BEGIN_SRC emacs-lisp :exports none
(setq org-latex-title-command "")
(setq org-beamer-frame-level 2)
#+END_SRC

# AGH Setup:
#+LATEX_HEADER: \newcommand\shorttitle{Projekt języka programowania \dots}
#+LATEX_HEADER: \renewcommand\insertshorttitle{\shorttitle}
#+LATEX_HEADER: \let\oldframetitle\frametitle
#+LATEX_HEADER: \renewcommand{\frametitle}[1]{\oldframetitle{\ifthenelse{\equal{#1}{}}{\secname}{\secname \space - #1}}}

# TITLE Frame
#+begin_latex
{
\usebackgroundtemplate{\includegraphics[width=\paperwidth]{titlepagepl}} % wersja polska
\begin{frame}
   \titlepage
\end{frame}
}
#+end_latex

# STUFF
#+begin_latex
\setbeamertemplate{itemize items}[default]
%\renewcommand\pause{}
#+end_latex

* Problem
# Problemy systemów rozproszonych w literaturze.
# Istotne problemy, które są pomijane.
# Platform Awareness

# Heterogeniczność rozumiana na dwa sposoby.
# Heterogeniczność platform sprzętowych.
# Heterogeniczność systemów rozproszonych.

# Brak/nieadekwatne rozwiązania heterogeniczności i Platform Awareness.
# Technologia wpływa na sposób tworzenia systemów rozproszonych.

# Celem pracy jest zaprojektowanie języka programowania rozwiązującego problem, ...
# ...implementacja kompilatora, runtime i systemu modułowego dla tego języka, ...
# ...integracja języka z wieloma platformami.

** Na czym się skupiamy
- Skalowalność
- Dynamiczność
- Niezawodność
- Konfiguracja
#+LaTeX: \pause
- Heterogeniczność?
- Świadomość platformy?

** Heterogeniczność
#+LaTeX: \alt<3>{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.5\textwidth
[[file:./img/shapesorter.jpg]]
#+END_CENTER

#+LaTeX: }{
#+LaTeX: \alt<2>{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/heterohomo2.pdf]]
#+END_CENTER

#+LaTeX: }{

#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/heterohomo1.pdf]]
#+END_CENTER
#+LaTeX: }}

** State of the Art
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.8\textwidth
[[file:./img/sota.pdf]]
#+END_CENTER

#+LaTeX: \pause
- Heterogeniczność?
- Świadomość platformy?

** COMMENT Przykład
# Aplikacja Client/Server wymaga skalowania.
# Skalowanie wprowadza load-balancery.
# Stan aplikacji wymaga wprowadzenia dodatkowych węzłów bazodanowych.
# Skalowania bazy danych wymaga dodatkowych load-balancerów.
# Wniosek: heterogeniczność systemów rozproszonych jest naturalna.
# Wniosek: obecne technologie nie są kompatybilne z Platform Awareness.

#+LaTeX: \alt<4>{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/arch_example4.pdf]]
#+END_CENTER

#+LaTeX: }{\alt<3>{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/arch_example3.pdf]]
#+END_CENTER

#+LaTeX: }{\alt<2>{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/arch_example2.pdf]]
#+END_CENTER

#+LaTeX: }{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/arch_example1.pdf]]
#+END_CENTER
#+LaTeX: }}}

** COMMENT Heterogeniczność bez świadomości
# Obecne technologie każą nam udawać, że system jest mniej złożony.
# W rzeczywistości systemy są bardziej złożone.
# Nie mamy dobrego sposobu propagacji wiedzy o systemie.

#+LaTeX: \alt<2>{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/arch_final2.pdf]]
#+END_CENTER

#+LaTeX: }{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/arch_final1.pdf]]
#+END_CENTER
#+LaTeX: }

** Cel pracy
- Rozwiązanie problemu heterogeniczności
#+LaTeX: \pause
- Projekt języka programowania
#+LaTeX: \pause
- Kompilator
- Środowisko uruchomieniowe wspierające przetwarzanie rozproszone
- System modułowy
#+LaTeX: \pause
- _Integracja_ z wieloma platformami

* Projekt
# Język ma bazować na prostym, przenośnym i integrowalnym rdzeniu.
# Rdzeń korzysta z kilku ortogonalnych abstrakcji:
# - Lambda calculus
# - Kontynuacje
# - Model Aktorowy

# Na prostej podstawie zbudowano system modułowy oparty o reguły.
# Innowacyjne podejście do modułów i ich interfejsów:
# - moduł dostarcza funkcjonalność vs. moduł wymaga funkcjonalności.

# Odkrywanie i propagacja wiedzy dzięki integracj z kompilatorem - kompilator emituje asercje faktów.
# Przetwarzanie wiedzy umożliwia dynamiczność, niezawodność, skalowalność, ...
# ...przetwarzanie złożonych zdarzeń - sygnalizacja zaistnienia faktów i ...
# ...świadomość platformy - dodatkowe adnotacje pozwalają na tworzenie/wybieranie redundantnych modułów.

** Prosty rdzeń języka
- Przenośny i _integrowalny_ z wieloma platformami

#+LaTeX: \pause
- \lambda calculus - funkcje:
#+BEGIN_SRC scheme
(lambda (x) x)
#+END_SRC

#+LaTeX: \pause
- Kontynuacje:
#+BEGIN_SRC scheme
(+ 1 (reset (* 2 (shift k (k (k 4)))))) ; 17 wtf!?
#+END_SRC

#+LaTeX: \pause
- Model Aktorowy - procesy:
#+BEGIN_SRC scheme
(send (spawn do-something) 'message)
#+END_SRC

** System modułowy
- Moduł dostarcza funkcjonalność vs. moduł wymaga funkcjonalności:

#+LaTeX: \begin{multicols}{2}
#+BEGIN_SRC scheme
(module FProvider
  (provide f)
  (function (f) ...))
(module FUser
  (require FProvider))
#+END_SRC

#+LaTeX: \pause
#+BEGIN_SRC scheme
(module FProvider
  (function (f) ...))
(module FUser
  (require ?m
    (and (module ?m)
         (provides ?m f))))
#+END_SRC
#+LaTeX: \end{multicols}

#+LaTeX: \pause
- Oparty o reguły:
#+BEGIN_SRC scheme
(whenever (and (module ?m) (provides ?m feature))
  (start-using ?m))
#+END_SRC

** Inżynieria wiedzy
- Automatyczne odkrywanie i propagacja wiedzy
#+LaTeX: \begin{multicols}{2}
#+BEGIN_SRC scheme
(module Foo
  (function (bar) ...))
#+END_SRC
#+LaTeX: \newcolumn
: (module Foo)
: (provides Foo bar)
#+LaTeX: \end{multicols}

#+LaTeX: \pause
- Heterogeniczność i świadomość platformy
#+LaTeX: \begin{multicols}{2}
#+BEGIN_SRC scheme
(@ O-time "N^2")
(@ O-space "1")
(function (insertion-sort xs)
  ...)
#+END_SRC
#+LaTeX: \newcolumn
#+BEGIN_SRC scheme
(@ O-time "NlogN")
(@ O-space "N")
(function (merge-sort xs)
  ...)
#+END_SRC
#+LaTeX: \end{multicols}

#+LaTeX: \pause
- Dynamiczność, niezawodność i skalowalność

* Implementacja
# Kompilator wspiera makroekspansję kodu.
# Główną fazą kompilacji jest transformacja przekazywania kontynuacji.

# Środowisko uruchomieniowe wykorzystuje algorytm CFS w celu sprawiedliwego harmonogramowania procesów.
# Umożliwia to łatwą implementacje Modelu Aktorowego.

# System regułowy oparty o Rete + autorskie rozszerzenia.
# Wspiera wnioskowanie w przód.
# Wspiera wnioskowanie wstecz.

** COMMENT Kompilator
# Implementacja wykorzystuje LLVM.
# Dzięki temu łatwo jest dystrybuować kod - archiwa bitkodu LLVM.
# Pozwala na AOT i JIT kompilację.
# Wspiera wiele platform:
# - x86, ARM,
# - AVR, Epiphany, Xtensa,
# - nawet MOS 6502, Javascript.

#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.8\textwidth
[[file:./img/archs.pdf]]
#+END_CENTER

** Kompilator
- Makroekspansja:
#+LaTeX: \begin{multicols}{2}
#+BEGIN_SRC scheme
;; Przed makroekspansją
(and A B)
(or A B)
#+END_SRC
#+LaTeX: \breakcol
#+BEGIN_SRC scheme
;; Po makroekspansji
(if A B false)
(if A true B)
#+END_SRC
#+LaTeX: \end{multicols}

#+LaTeX: \pause
- Transformacja /Continuation Passing Style/:
#+LaTeX: \begin{multicols}{2}
#+BEGIN_SRC scheme
;; Przed transformacją
(lambda (x)
  (* 2 x))
#+END_SRC
#+LaTeX: \breakcol
#+BEGIN_SRC scheme
;; Po transformacji
(lambda (x cont)
  (%MULT 2 x cont))
#+END_SRC
#+LaTeX: \end{multicols}

#+LaTeX: \pause
- Wynikowy kod jest podzbiorem języka Scheme

** Środowisko uruchomieniowe
- Integracja ze środowiskiem uruchomieniowym języka Scheme

#+LaTeX: \pause
- Model Aktorowy:
#+BEGIN_SRC scheme
(spawn fun)
(self)
(send pid message)
(recv)
(sleep time)
#+END_SRC

#+LaTeX: \pause
- Algorytm /Completely Fair Scheduler/

** System regułowy
- Algorytm Rete z autorskimi rozszerzeniami

#+LaTeX: \pause
- Wnioskowanie w przód:
#+BEGIN_SRC scheme
(whenever (and (module ?m)
               (provides ?m ?f))
  (list ?m ?f))
#+END_SRC

#+LaTeX: \pause
- Wnioskowanie wstecz:
#+BEGIN_SRC scheme
(select (?m ?f)
        (and (module ?m)
             (provides ?m ?f)))
#+END_SRC

* COMMENT Wyniki
# Analiza wydajności systemu regułowego?

# Przykład działania systemu rozproszonego zrealizowanego w języku?

** 
#+LaTeX: \alt<2>{
- TODO: obrazek z różnymi urządzeniami gadającymi ze sobą.
- TODO: Lista rzeczy, które udało się wykonać.
- TODO: Lista przyszłych kierunków rozwoju?
#+LaTeX: }{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/rete_bench.pdf]]
#+END_CENTER
#+LaTeX: }

* Podsumowanie
# Zaprojektowano kompletny, funkcyjny język programowania.
# Zaimplementowano kompilator wykorzystujący transformację przekazywania kontynuacji.
# Zaimplementowano podstawowe środowisko uruchomieniowe języka bazujące na języku Scheme.
# Zaimplementowano i zintegrowano system regułowy bazujący na algorytmie Rete, który umożliwia inżynierię wiedzy.

# W przyszłości konieczne będzie wykorzystanie LLVM w celu optymalizacji i kompilacji natywnej.
# Dodatkowo zaprojektowano lepszą implementacją systemu regułowego, która zostanie wykonana w przyszłości.

** Co udało się wykonać
- Projekt języka programowania

#+LaTeX: \pause
- Kompilator
- Środowisko uruchomieniowe
- System modułowy

#+LaTeX: \pause
- Inżynieria wiedzy

#+LaTeX: \pause
- Rozwiązanie problemu heterogeniczności i świadomości platformy

** Przyszłe kierunki rozwoju
- Kompilacja z wykorzystaniem LLVM

#+LaTeX: \pause
- Lepsza integracja systemu regułowego

#+LaTeX: \pause
- Rozszerzenie wykorzystania inżynierii wiedzy

* 
#+LaTeX: \usebackgroundtemplate{\includegraphics[width=\paperwidth]{titlepagepl}}
** 

# FINAL FRAME
#+begin_latex
\vfill
\vfill
\vfill
\centering{
\vfill
    \Huge{Dziękuję za uwagę.}
    \vfill
    \large\insertauthor
}
\vfill
#+end_latex
