# ###############################################################################
#+TITLE: Projekt języka programowania \\ wspierającego przetwarzanie rozproszone \\ na platformach heterogenicznych.
#+AUTHOR: Kajetan Rzepecki
#+DATE: \today
#+LANGUAGE: pl
#+LATEX_HEADER: \institute[AGH-UST]{Wydział EAIiIB\\ Katedra Informatyki Stosowanej}
#
#+startup: beamer
#+LATEX_CLASS: beamer

#+OPTIONS: toc:nil
#
#+LATEX_HEADER: \usepackage[polish]{babel}
#+LATEX_HEADER: \usepackage{ifthen}
#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \usepackage{minted}
#
#+LATEX_HEADER: \usetheme{AGH}
#+LATEX_HEADER: \setbeamertemplate{itemize item}{$\maltese$}
# ###################

# Helpers & Stuff
#+BEGIN_SRC emacs-lisp :exports none
(setq org-latex-title-command "")
(setq org-beamer-frame-level 2)
#+END_SRC

# AGH Setup:
#+LATEX_HEADER: \newcommand\shorttitle{Projekt języka programowania \dots}
#+LATEX_HEADER: \renewcommand\insertshorttitle{\shorttitle}
#+LATEX_HEADER: \let\oldframetitle\frametitle
#+LATEX_HEADER: \renewcommand{\frametitle}[1]{\oldframetitle{\ifthenelse{\equal{#1}{}}{\secname}{\secname \space - #1}}}

# TITLE Frame
#+begin_latex
{
\usebackgroundtemplate{\includegraphics[width=\paperwidth]{titlepagepl}} % wersja polska
\begin{frame}
   \titlepage
\end{frame}
}
#+end_latex

# STUFF
#+begin_latex
\setbeamertemplate{itemize items}[default]
%\renewcommand\pause{}
#+end_latex

* Problem
** Heterogeniczność
#+LaTeX: \alt<2>{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/heterohomo2.pdf]]
#+END_CENTER

#+LaTeX: }{

#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/heterohomo1.pdf]]
#+END_CENTER
#+LaTeX: }

** Na czym się skupiamy
- Skalowalność
- Dynamiczność
- Niezawodność
- Konfiguracja
#+LaTeX: \pause
- Heterogeniczność?
- Świadomość platformy?

** State of the Art
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.8\textwidth
[[file:./img/sota.pdf]]
#+END_CENTER

#+LaTeX: \pause
- Heterogeniczność?
- Świadomość platformy?

** Przykład

#+LaTeX: \alt<4>{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/arch_example4.pdf]]
#+END_CENTER

#+LaTeX: }{\alt<3>{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/arch_example3.pdf]]
#+END_CENTER

#+LaTeX: }{\alt<2>{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/arch_example2.pdf]]
#+END_CENTER

#+LaTeX: }{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/arch_example1.pdf]]
#+END_CENTER
#+LaTeX: }}}

** Heterogeniczność bez świadomości
#+LaTeX: \alt<2>{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/arch_final2.pdf]]
#+END_CENTER

#+LaTeX: }{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/arch_final1.pdf]]
#+END_CENTER
#+LaTeX: }

** Cel pracy
- Projekt języka programowania
#+LaTeX: \pause
- Kompilator
- System uruchomieniowy + dystrybucja
- System modułowy + wiedza
#+LaTeX: \pause
- _Integracja_ z wieloma platformami

* Architektura
** Prosty rdzeń języka
- Przenośny i _integrowalny_ z wieloma platformami

#+LaTeX: \pause
- \lambda calculus - funkcje:
#+BEGIN_SRC scheme
(lambda (x) x)
#+END_SRC

#+LaTeX: \pause
- Kontynuacje:
#+BEGIN_SRC scheme
(+ 1 (reset (* 2 (shift k (k (k 4)))))) ; 17 wtf!?
#+END_SRC

#+LaTeX: \pause
- Model Aktorowy - procesy:
#+BEGIN_SRC scheme
(send (spawn do-something) 'message)
#+END_SRC

** System modułowy
- Oparty o reguły:
#+BEGIN_SRC scheme
(whenever (and (module ?m) (provides ?m feature))
  (start-using ?m))
#+END_SRC

#+LaTeX: \pause
- Moduł dostarcza funkcjonalność vs. moduł wymaga funkcjonalności:

#+LaTeX: \begin{multicols}{2}
#+BEGIN_SRC scheme
(module FProvider
  (provide f)
  (function (f) ...))
(module FUser
  (require FProvider))
#+END_SRC

#+LaTeX: \pause
#+BEGIN_SRC scheme
(module FProvider
  (function (f) ...))
(module FUser
  (require ?m
    (and (module ?m)
         (provides ?m f))))
#+END_SRC
#+LaTeX: \end{multicols}

** Przetwarzanie wiedzy
- Automatyczne odkrywanie i propagacja wiedzy
#+LaTeX: \begin{multicols}{2}
#+BEGIN_SRC scheme
(module Foo
  (function (bar) ...))
#+END_SRC
#+LaTeX: \newcolumn
: (module Foo)
: (provides Foo bar)
#+LaTeX: \end{multicols}

#+LaTeX: \pause
- Dynamiczność, niezawodność i skalowalność

#+LaTeX: \pause
- Przetwarzanie złożonych zdarzeń

#+LaTeX: \pause
- Świadomość platformy
#+BEGIN_SRC scheme
(@ big-oh (log N)
  (function (hillis-steele xs) ; runs on O(N) GPU cores
    ...))
#+END_SRC

* Implementacja
** Kompilator
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.8\textwidth
[[file:./img/archs.pdf]]
#+END_CENTER

** System regułowy
- algorytm Rete + rozszerzenia

#+LaTeX: \pause
- wnioskowanie w przód:
#+BEGIN_SRC scheme
(whenever (and (module ?m)
               (provides ?m ?f))
  (list ?m ?f))
#+END_SRC

#+LaTeX: \pause
- wnioskowanie wstecz:
#+BEGIN_SRC scheme
(select (?m ?f)
        (and (module ?m)
             (provides ?m ?f)))
#+END_SRC

* Wyniki
** 
#+LaTeX: \alt<2>{
- TODO: obrazek z różnymi urządzeniami gadającymi ze sobą.
- TODO: Lista rzeczy, które udało się wykonać.
- TODO: Lista przyszłych kierunków rozwoju?
#+LaTeX: }{
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.7\textwidth
[[file:./img/rete_bench.pdf]]
#+END_CENTER
#+LaTeX: }

* 
#+LaTeX: \usebackgroundtemplate{\includegraphics[width=\paperwidth]{titlepagepl}}
** 

# FINAL FRAME
#+begin_latex
\vfill
\vfill
\vfill
\centering{
\vfill
    \Huge{Dziękuję za uwagę.}
    \vfill
    \large\insertauthor
}
\vfill
#+end_latex
