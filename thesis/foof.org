# ###############################################################################
#+TITLE:
#+AUTHOR: Kajetan Rzepecki
#+DATE: 2015
#+LANGUAGE: pl
#
#+STARTUP: content
#+EXPORT_SELECT_TAGS: export
#+LaTeX_CLASS: aghdpl
#+LaTeX_CLASS_OPTIONS: [a4paper, 12pt]
#+LaTeX_HEADER: \usepackage[polish]{babel}
#+LaTeX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \usepackage[nottoc, notlof, notlot]{tocbibind}
#+OPTIONS: tags:nil, todo:nil, toc:nil
# ###################

# Helpers & Stuff
#+begin_src emacs-lisp :exports none
  (setq org-export-latex-title-command "")
  (add-to-list 'org-latex-classes
               '("aghdpl"
                 "\\documentclass{aghdpl}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                 ))
  (setq org-latex-classes (cdr org-latex-classes))
#+end_src

# AGH setup:
#+LATEX_HEADER: \shortauthor{K. Rzepecki}
#+LATEX_HEADER: \degreeprogramme{Informatyka}

#+LATEX_HEADER: \thesistype{Praca dyplomowa magisterska}

#+LATEX_HEADER: \titlePL{Projekt języka programowania wspierającego przetwarzanie rozproszone na platformach heterogenicznych.}
#+LATEX_HEADER: \titleEN{Design of a programming language with support for distributed computing on heterogenous platforms.}

#+LATEX_HEADER: \shorttitlePL{Projekt języka programowania wspierającego przetwarzanie rozproszone \dots}
#+LATEX_HEADER: \shorttitleEN{Design of a programming language with support for distributed computing \dots}

#+LATEX_HEADER: \supervisor{dr inż. Piotr Matyasik}

#+LATEX_HEADER: \department{Katedra Informatyki Stosowanej}

#+LATEX_HEADER: \faculty{Wydział Elektrotechniki, Automatyki,\protect\\[-1mm] Informatyki i Inżynierii Biomedycznej}

#+LATEX_HEADER: \acknowledgements{Serdecznie dziękuję opiekunowi pracy za wsparcie merytoryczne oraz dobre rady edytorskie pomocne w tworzeniu pracy.}
# #+LATEX_HEADER: \acknowledgements{Serdecznie dziękuję Lucynie oraz siostrze Alicji za cierpliwość i wsparcie podczas tworzenia pracy dyplomowej.}

# Title pages & table of contents:
#+begin_latex
\titlepages
\tableofcontents
#+end_latex

# List of Listings specific:
#+begin_latex
\newcommand{\listlistingname}{\bfseries\Large{Spis listingów}}
\newlistof[chapter]{mylisting}{mlol}{\listlistingname}
\newcommand{\mylisting}[1]{%
  \refstepcounter{mylisting}%
  #1%
  \addcontentsline{mlol}{figure}
    {\protect\numberline{\thechapter.\thelisting}#1}\par%
}
\renewcommand{\cftbeforemloltitleskip}{20mm}
\renewcommand{\cftaftermloltitleskip}{5mm}
#+end_latex

* Wstęp
#+latex: \label{sec:intro}

Celem pracy jest zdążenie na czas [[cite:Backus1978]].

** Motywacja pracy
- Heterogeneity being incresingly important
- add heterogeneity clarification diagram
- Platform Independence being insufficient
- Platform Awareness being the key
- This language is supposed to solve heterogeneity using Platform Awareness.
- hint at previous work in this field (mah beng)

** Zawartość pracy
- list what is found where in the thesis

* Język =FOOF=
# Przeznaczenie języka
- elegantly solving heterogenuity issues
- remain simple & highly ortogonal
- embody Spartan Programming principles

** Ideologia języka
- simplicity but not crudeness
- pragmatism
- platform awareness
- orthogonal features

** Proste typy danych
- describe numbers
- describe symbols
- describe strings

** Złożone typy danych
- describe lists
- describe vectors ?
- describe maps ?

** Funkcje
- a note about lambda calculus
- add a code fragment implementing booleans in lambda calculus ?
- describe lambdas
- describe named lambdas aka defines

** Kontynuacje
- describe the notion of a continuation
- describe CPS transformation and comment code equivalence
- add a code example of the CPS transform
- hint at greater detail in a future section
- hint at delimited control
- describe exceptions via continuations

** Przetwarzanie współbieżne i rozproszone
- describe processes via continuations
- describe actor model primitives
- comment on adding distribution

** Reprezentacja wiedzy w języku
- describe various ways of knowledge representation
- describe use cases in the language
- hint at using an RBS

** Makra
- describe macros
- add some code examples of let -> lambda etc
- hint at problems of hygiene & add code example ?
- hint at problems of macros & modules coexisting

** System modułowy
- describe structures - namespaces for definitions
- describe modules - parameterized structures
- describe units - runnable modules
- describe protocols - a set of capabilities of a module
- hint at protocols & SOA connection

* Kompilator języka =FOOF=
- mention technology selection & limitations (large project, little time)
- mention possible bootstrapping
- briefly touch on the architecture
- hint at using Scheme for the boring details (datatypes etc)

** Architektura kompilatora
- compiler block diagram
- list compilation phases
- list which phases have been actually implemented
- list which phases have been skipped and say why (optimization, code-gen, parsin)

** Parser
- briefly describe how Scheme praser works and what it produces
- hint at a possibility of replacing this with a PEG-based packrat

** Makro-ekspansja
- describe macroexpantion phase
- describe why macroexpansion is hardcoded
- list available macros
- show some examples of macro-expanded code

** Obsługa Systemu Modułowego
- describe how modules are handled right now
- show some examples of macro-expanded structures & modules
- maby combine this with the previous section ?
- maby hint at special module access syntax (foo.bar.baz)

** Transformacja /Continuation Passing Style/
- describe in detail why this is useful
- describe in detail how to transform simple stuff
- describe in detail how to transform functions
- describe in detail how to handle exceptions
- hint at emitting calls to primitive functions =&yield-cont=, =&uproc-error-handler= etc

** Generacja kodu
- describe how a subset of both Scheme and FOOF is emitted
- describe how Scheme is used for direct code execution
- hint at further development using LLVM
- mention a requirement to perform closure conversion
- add a code example of closure conversion

* System uruchomieniowy języka
- briefly touch on the architecture
- mention Scheme bootstrap

** Architektura systemu uruchomieniowego
- block diagram of the system including the RBS
- describe various parts
- hint at in-depth description of RBS implementation in a future section

** Implementacja podstawowych typów danych
- describe scheme bootstrap
- describe equivalence of various constructs such as lambdas

** Implementacja kontynuacji
- describe how continuations are handled without getting into CFS (returning cont + hole)
- add a code example with step-by-step execution

** Implementacja procesów
- add a diagram of the uProc context - only include status, cont & handler registers
- describe uProc context registers
- describe how continuations with returns play into this scheme (recall =&yield-cont=)
- describe how error handling is implemented (recall =&uproc-error-handler= etc)

** Harmonogramowanie procesów
- uProc context diagram - add priority & rtime
- describe the Completely Fair Scheduler
- add pseudocode listing showing the algorithm
- describe uProc context switching
- mention previous implementation in beng
- contrast current impl with previous one (lack of wait list, heaps instead of RBT)

** Implementacja Modelu Aktorowego
- describe actor model briefly
- uProc context diagram - add pid & msgqueue
- describe modifications to the runtime required by actor model (*current-uproc*, uproc list, context fields)
- describe implementation of various actor model primitives
- add some code examples and discussion of its effects and what happens

** Dystrybucja obliczeń
- difference between concurrency & distribution
- describe modifications to the runtime in order to support distribution
- hint about using a simple protocol
- hint about moving this into stdlib

* Reprezentacja i przetwarzanie wiedzy
- describe how this needs a separate section
- elaborate on different ways of knowledge representation

** Reprezentacja wiedzy w języku
- describe facts - signalling, assertion & retraction
- describe rules briefly - adding & disabling, triggering

** Algorytm Rete
- describe in detail the algorithm
- describe network merging
- add a diagram showing network merging
- describe briefly its history
- Rete vs naïve approach
- add a diagram showing how it is better

** Implementacja Rete - wnioskowanie w przód
- describe what forward-chaining is
- describe naïve Rete - no network merging
- hint that this might be a good thing (future section)
- describe all the nodes

** Implementacja wnioskowania wstecz
- describe what backward-chaining is
- describe fact store in detail - linear, in-memory database
- querying fact store = create a rule and apply all known facts to it

** Integracja z Systemem Uruchomieniowym
- describe how it sucks right now
- describe possible integration with the module system
- describe possible representation of rules by autonomus processes
- add a diagram of concurrent rules

* Podsumowanie
#+latex: \label{sec:outro}

- reiterate the goal of the thesis
- state how well has it been achieved

** Kompilator języka =FOOF=
- needs better optimizations
- needs better error handling

** System uruchomieniowy
- needs more stuff
- needs macroexpansion
- needs to drop RBS and move it into stdlib

** Przyszłe kierunki rozwoju
- more datatypes
- native compilation via LLVM
- bootstrapping compiler
- librarized RBS
- librarized distribution with data encryption & ACLs
- data-level paralellism

# The bibliography
#+begin_latex
\bibliographystyle{ieeetr}
\bibliography{bibs}
#+end_latex

#+latex: \appendix
* Gramatyka języka =FOOF=
- concrete language grammar in PEG or BNF

* Przykładowe programy
- some basic definitions & operations
- fibonacci
- parallell fibonacci
- module system - logger
- error handling - (raise (raise "fight the powa"))
- RBS forward-chaining
- RBS backward-chaining

* Spis wbudowanych funkcji języka =FOOF=
- list contents of bootstrap.scm
- describe what =&make-structure=, =&yield-cont= etc do

* Spisy rysunków i fragmentów kodu
#+latex: \label{sec:misc}

#+begin_latex
\begingroup
  \listoffigures
  \listofmylisting
\endgroup
#+end_latex
