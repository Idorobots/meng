# ###############################################################################
#+TITLE:
#+AUTHOR: Kajetan Rzepecki
#+DATE: 2015
#+LANGUAGE: pl
#
#+STARTUP: content
#+EXPORT_SELECT_TAGS: export
#+LaTeX_CLASS: aghdpl
#+LaTeX_CLASS_OPTIONS: [a4paper, 12pt]
#+LaTeX_HEADER: \usepackage[polish]{babel}
#+LaTeX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \usepackage[nottoc, notlof, notlot]{tocbibind}
#+OPTIONS: tags:nil, todo:nil, toc:nil
# ###################

# Helpers & Stuff
#+begin_src emacs-lisp :exports none
  (setq org-export-latex-title-command "")
  (add-to-list 'org-latex-classes
               '("aghdpl"
                 "\\documentclass{aghdpl}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                 ))
  (setq org-latex-classes (cdr org-latex-classes))
#+end_src

# AGH setup:
#+LATEX_HEADER: \shortauthor{K. Rzepecki}
#+LATEX_HEADER: \degreeprogramme{Informatyka}

#+LATEX_HEADER: \thesistype{Praca dyplomowa magisterska}

#+LATEX_HEADER: \titlePL{Projekt języka programowania wspierającego przetwarzanie rozproszone na platformach heterogenicznych.}
#+LATEX_HEADER: \titleEN{Design of a programming language with support for distributed computing on heterogenous platforms.}

#+LATEX_HEADER: \shorttitlePL{Projekt języka programowania wspierającego przetwarzanie rozproszone \dots}
#+LATEX_HEADER: \shorttitleEN{Design of a programming language with support for distributed computing \dots}

#+LATEX_HEADER: \supervisor{dr inż. Piotr Matyasik}

#+LATEX_HEADER: \department{Katedra Informatyki Stosowanej}

#+LATEX_HEADER: \faculty{Wydział Elektrotechniki, Automatyki,\protect\\[-1mm] Informatyki i Inżynierii Biomedycznej}

#+LATEX_HEADER: \acknowledgements{Serdecznie dziękuję opiekunowi pracy za wsparcie merytoryczne oraz dobre rady edytorskie pomocne w tworzeniu pracy.}
# #+LATEX_HEADER: \acknowledgements{Serdecznie dziękuję Lucynie oraz siostrze Alicji za cierpliwość i wsparcie podczas tworzenia pracy dyplomowej.}

# Title pages & table of contents:
#+begin_latex
\titlepages
\tableofcontents
#+end_latex

# List of Listings specific:
#+begin_latex
\newcommand{\listlistingname}{\bfseries\Large{Spis listingów}}
\newlistof[chapter]{mylisting}{mlol}{\listlistingname}
\newcommand{\mylisting}[1]{%
  \refstepcounter{mylisting}%
  #1%
  \addcontentsline{mlol}{figure}
    {\protect\numberline{\thechapter.\thelisting}#1}\par%
}
\renewcommand{\cftbeforemloltitleskip}{20mm}
\renewcommand{\cftaftermloltitleskip}{5mm}
#+end_latex

* Wstęp
#+latex: \label{sec:intro}

Celem pracy jest zdążenie na czas [[cite:Backus1978]].

** Motywacja pracy
- Knowledge for Service Oriented Architecture
- Platform Awareness

** Zawartość pracy

* Język =FOOF=
- language grammar
- language philosophy

** Proste typy danych
- atoms

** Złożone typy danych
- lists
- vectors
- maps

** Funkcje i kontynuacje
- about lambdas
- about continuations
- exceptions via continuations

** System modułowy
- protocols
- modules
- units
- SOA

** Przetwarzanie współbieżne i rozproszone
- actor model
- distribution

** Reprezentacja wiedzy w języku
- unconstrained knowledge about the system
- RBS vs Prolog vs ontologies
- appendix "ontologies"

* Kompilator języka =FOOF=
- compiler block diagram
- list compilation phases
- mention bootstrapping

** Implementacja typów danych
- 2 bit tags for simple objects
- tag word for complex objects

** Implementacja systemu modułowego
- simple transform

** Analiza leksykalna i syntaktyczna
- PEG
- macroexpander

** Analiza semantyczna
- CPS
- delimited continuations

- error handling

** Dalsze transformacje i optymaliza kodu
- closure conversion
- lambda lifting
- partial evaluation?
- constant folding?

** Generacja kodu wynikowego
- might need appendix "LLVM"
- name mangling
- low-level optimizations
- source level translation

** Implementacja systemu uruchomieniowego języka
- primops
- alloc
- gc
- scheduler
- network stack

* System uruchomieniowy języka
- block diagram of the system
- might need appendix "tracing vs ref count"
- might need to throw this away

** Architektura systemu uruchomieniowego
- built-in units
- process tree

** Ładowanie i uruchamianie programów
- loading modules
- starting units
- mention unit redundancy
- list primops

** Alokator pamięci
- gc_malloc
- allocation strategy
- garbage collection
- garbage cycles handling
- etc
- list primops

** Harmonogramowanie procesów
- cue next section
- list primops

** Komunikacja między węzłami
- cue next section
- list primops

** Baza wiedzy
- cue next section
- list primops

* Przetwarzanie współbieżne i rozproszone
- difference between concurrency & distribution

** Reprezentacja procesów
- process object

** Harmonogramowanie procesów
- CFS algorithm

** Implementacja symetrycznego multiprocessingu
- Completele Fair Scheduler
- cue CPS

** Implementacja Modelu Aktorowego
- message passing
- message queue
- copying vs passing pointers

** Protokół komunikacji międzywęzłowej
- node & process IDs
- packets

** Implementacja protokołu komunikacji
- TCP vs UDP

** Listy kontroli dostępu
- safety measures
- might need to be thrown away

* Reprezentacja i przetwarzanie wiedzy
- might need appendix "Rete usage examples"

** Reprezentacja wiedzy w języku
- facts
- rules

** Algorytm Rete
- about Rete
- Rete vs naïve approach

** Implementacja Rete - forward chaining
- naïve Rete
- all the nodes!

** Implementacja backward-chaining
- fact store - linear, in-memory database

** Integracja przetwarzania wiedzy w języku
- integration with the module system
- rules represented by autonomus processes

** Przekazywanie wiedzy pomiędzy węzłami
- network protocols
- ACLs

* Podsumowanie
#+latex: \label{sec:outro}
** Kompilator języka =FOOF=
- needs better optimizations
- needs better error handling

** System uruchomieniowy
- needs more stuff
- needs macroexpansion

** Przyszłe kierunki rozwoju
- type system
- datatypes
- runtime
- data-level paralellism
- data encryption & ACLs
- DHT (might be a good example program?)

# The bibliography
#+begin_latex
\bibliographystyle{ieeetr}
\bibliography{bibs}
#+end_latex

#+latex: \appendix

* Spisy rysunków i fragmentów kodu
#+latex: \label{sec:misc}

#+begin_latex
\begingroup
  \listoffigures
  \listofmylisting
\endgroup
#+end_latex
